services:
  redis:
    image: "redis:6"
    ports:
      - "6379:6379"
    networks:
      - backend_network

  postgres:
    image: "postgres:13"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: recruiting
    expose:
      - "5432"
    ports:
      - "5432:5432"
    networks:
      - backend_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  data_pipeline:
    build:
      context: .
      dockerfile: docker/Dockerfile.data_pipeline
    volumes:
      - ./:/srv/recruiting/
    environment:
      DB_URL: "postgresql://postgres:postgres@postgres:5432/recruiting"
    networks:
      - backend_network
    depends_on:
      postgres:
        condition: service_healthy

  backend:
    build:
      context: .
      dockerfile: docker/Dockerfile.backend
    volumes:
      - ./:/srv/recruiting/
    command: uvicorn --reload --reload-dir "/srv/recruiting/backend" --host 0.0.0.0 --port 8080 --log-level "debug" "backend.api.app:app"
    environment:
      DB_URL: "postgresql://postgres:postgres@postgres:5432/recruiting"
    ports:
      - "8080:8080"
    networks:
      - backend_network
    depends_on:
      data_pipeline:
        condition: service_completed_successfully

  frontend:
    build:
      context: .
      dockerfile: docker/Dockerfile.frontend
      args:
        - REACT_APP_API_URL=http://localhost:8080
    ports:
      - "3000:3000"
    networks:
      - backend_network
    depends_on:
      backend:
        condition: service_started


volumes:
  postgres_data: {}

networks:
  backend_network: {}
